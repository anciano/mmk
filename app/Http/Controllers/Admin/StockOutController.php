<?php
namespace App\Http\Controllers\Admin;

use App\Models\Busi\Customer;
use App\Models\Busi\Material;
use App\Models\Busi\StockOutItem;
use App\Models\Busi\Store;
use Exception;
use Illuminate\Http\Request;
use App\Http\Controllers\Admin\AdminController;
use App\Models\Busi\StockOut;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class StockOutController extends AdminController
{
	public function newEntity(array $attributes = [])
	{
		// TODO: Implement newEntity() method.
		return new StockOut($attributes);
	}

	/**
	* Display a listing of the resource.
	*
	* @return  \Illuminate\Http\Response
	*/
	public function index()
	{

        $all = Customer::all();
        $customers = $all->map(function ($item){
            return ['label' => $item->fname, 'value' => $item->id];
        });

        $stores = Store::all()->map(function ($item){
            return ['label' => $item->ffullname, 'value' => $item->id];
        });

        $materials = Material::all();
		return view('admin.stock-out.index',compact('customers','stores','materials'));
	}

	/**
	* Show the form for creating a new resource.
	*
	* @return  \Illuminate\Http\Response
	*/
	public function create()
	{
		return view('admin.stock-out.create');
	}

	/**
	* Display the specified resource.
	*
	* @param    int  $id
	* @return  \Illuminate\Http\Response
	*/
	public function edit($id)
	{
		$entity = StockOut::find($id);
		return view('admin.stock-out.edit', ['entity' => $entity]);
	}

	/**
	* Display the specified resource.
	*
	* @param    int  $id
	* @return  \Illuminate\Http\Response
	*/
	public function show($id)
	{
		//
	}

	public function store(Request $request, $extraFields=[])
    {
        $data = $request->input('data', []);
        $props = current($data);

        $extraFields=[
            'fuser_id' => Auth::user()->id,
            //'fbill_no' => Store::find($props['fstore_id'])->fnumber.date("Ymd")
        ];
        return parent::store($request, $extraFields);
    }

	/**
	 * @param  Request $request
	 * @param  array $searchCols
	 * @param  array $with
	 * @param  null $conditionCall
	 * @param bool $all_columns
	 * @return \Illuminate\Http\JsonResponse
	 */
	public function pagination(Request $request, $searchCols = [], $with=[], $conditionCall = null, $all_columns = false){
		$searchCols = ["fbill_no","fdocument_status","fsbill_no"];
        $with=['customer','store','user'];
		return parent::pagination($request, $searchCols, $with);
	}

	/*
     * 审核
     */
	public function check(Request $request)
	{
		//return parent::check($request); // TODO: Change the autogenerated stub
		$data = $request->all();
		$ids = explode(",",$data['ids']);
		$entities = $this->newEntity()->newQuery()->whereIn('id',$ids)->get();
		$code = 200;
		$msg =  '审核成功！';
		DB::beginTransaction();
		try {
			foreach ($entities as $entity) {
				$entity->fdocument_status = "C";
				$entity->save();
				$entity->items()->update(['fdocument_status' => 'C']);
			}
			DB::commit();
		} catch (Exception $e) {
			$code = 400;
			$msg = $e->getMessage();
			DB::rollback();
		}

		return response()->json([
			'code' => $code,
			'result' => $msg,
			'data' => $entities
		]);
	}

	/*
	* 反审核
	*/
	public function unCheck(Request $request){
		$data = $request->all();
		$ids = explode(",",$data['ids']);
		$entities = $this->newEntity()->newQuery()->whereIn('id',$ids)->get();
		$code = 200;
		$msg =  '反审核成功！';
		DB::beginTransaction();
		try {
			foreach ($entities as $entity) {
				$entity->fdocument_status = "A";
				$entity->save();
				$entity->items()->update(['fdocument_status' => 'A']);
			}
			DB::commit();
		} catch (Exception $e) {
			$code = 400;
			$msg = $e->getMessage();
			DB::rollback();
		}

		return response()->json([
			'code' => $code,
			'result' => $msg,
			'data' => $entities
		]);
	}

    public function formFilter($queryBuilder, $data)
    {
        foreach ($data as $f){

            if (empty($f['value']))
                continue;

            switch ($f['name']){
                case "store_ffullname" : {
                    $ids = Store::query()->where('ffullname','like','%'.$f['value'].'%')->pluck('id');
                    $queryBuilder->whereIn('fstore_id', $ids);
                    break;
                }
                default : {
                    $queryBuilder=$this->adminFilterQuery($queryBuilder,$f);
                }
            }
        }
    }

}
