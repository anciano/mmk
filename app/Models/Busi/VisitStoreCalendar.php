<?php

namespace App\Models\Busi;

use App\Events\VisitStoreStatusChangedEvent;
use Illuminate\Database\Eloquent\Model;
use Log;


/**
 * 线路门店巡访日历
 * Class VisitStoreCalendar
 * @package App\Models\Busi
 * @author xrs
 * @SWG\Model(id="VisitStoreCalendar")
 * @SWG\Property(name="fleader_id", type="integer", description="员工上级id")
 * @SWG\Property(name="femp_id", type="integer", description="员工id")
 * @SWG\Property(name="fline_calendar_id", type="integer", description="线路巡防日历id")
 * @SWG\Property(name="forg_id", type="integer", description="组织id")
 * @SWG\Property(name="fstatus", type="integer", description="巡访状态（1-未开始， 2-进行中， 3-已完成）")
 * @SWG\Property(name="fstore_id", type="integer", description="门店id")
 * @SWG\Property(name="id", type="integer", description="")
 * @SWG\Property(name="fcreate_date", type="string", description="创建时间")
 * @SWG\Property(name="fcreator_id", type="integer", description="创建人")
 * @SWG\Property(name="fdate", type="string", description="日期")
 * @SWG\Property(name="fdocument_status", type="string", description="审核状态")
 * @SWG\Property(name="fmodify_date", type="string", description="修改时间")
 * @SWG\Property(name="fmodify_id", type="integer", description="修改人")
 * @SWG\Property(name="is_store_signed", type="boolean", description="门店在该天是否签约陈列费用协议")
 */
class VisitStoreCalendar extends BaseModel
{
    //
    protected $table = 'visit_store_calendar';
	protected $with = ['store','employee'];

	//protected $visible = ['id', 'fdate', 'femp_id', 'fline_calendar_id', 'fstore_id','fstatus', 'is_store_signed'];
	protected $appends = ['is_store_signed'];

    public $filter = true;

	public function todo_calendars(){
	    return $this->hasMany(VisitTodoCalendar::class,'fstore_calendar_id');
    }
	/**
	 * @return bool
	 */
	public function getIsStoreSignedAttribute(){
		$c = DisplayPolicyStore::check($this->fstore_id, $this->fdate);
		return $c;
	}

	public static function boot()
	{
		parent::boot(); // TODO: Change the autogenerated stub

        static::updated(function ($model){
	        //Log::info('event VisitStoreStatusChangedEvent');
	        event(new VisitStoreStatusChangedEvent($model));
        });
	}

	public function store(){
        return $this->hasOne(Store::class, 'id','fstore_id');
    }

    public function employee(){
        return $this->belongsTo(Employee::class, 'femp_id');
    }


    /*
     * 生成门店拜访日历
     * 参数 femp_id fstore_id fline_calendar_id fdate
     */
    public function makeCalendar($femp_id,$fstore_id,$fline_calendar_id,$fdate){
        $vsc = VisitStoreCalendar::create([
            'fdate' => $fdate,
            'femp_id' => $femp_id,
            'fline_calendar_id' => $fline_calendar_id,
            'fstore_id' => $fstore_id,
        ]);

        $model = new VisitTodoCalendar();
        $model->makeCalendar($fdate,$femp_id,$vsc->id,$fstore_id);
    }

    public function adminFilter($queryBuilder, $request)
    {
        $data = $request->all();
        if (!empty($data['tree'])){
            $emp = Employee::find($data['tree']['nodeid']);
            if (empty($emp)) {
                $dept = Department::find($data['tree']['nodeid']);
                $emp_ids = $dept->getAllEmployeeByDept()->pluck('id')->toArray();

                $queryBuilder->whereIn('femp_id', $emp_ids);
            } else {
                $queryBuilder->where('femp_id', $data['tree']['nodeid']);
            }
        }

        if (!empty($data['filter'])){
            foreach ($data['filter'] as $f){
                $filter_name = $f['name'];
                if ($filter_name=="femp"&&!empty($f['value'])){
                    $ids = Employee::query()->where('fname','like','%'.$f['value'].'%')->pluck('id');
                    $queryBuilder->whereIn('femp_id', $ids);
                }elseif ($filter_name=="fstore"&&!empty($f['value'])){
                    $ids = Store::query()->where('ffullname','like','%'.$f['value'].'%')->pluck('id');
                    $queryBuilder->whereIn('fstore_id', $ids);
                }else{
                    $queryBuilder=$this->adminFilterQuery($queryBuilder,$f);
                }
            }
        }

        return $queryBuilder;
    }
}
