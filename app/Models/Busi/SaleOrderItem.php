<?php

namespace App\Models\Busi;

use Illuminate\Database\Eloquent\Model;

/**
 * model description
 * Class SaleOrderItem
 * @package  App\Models
 *
 * @author  xrs
 * @SWG\Model(id="SaleOrderItem")
 * @SWG\Property(name="id", type="integer", description="")
 * @SWG\Property(name="fsale_order_id", type="integer", description="")
 * @SWG\Property(name="fstock_id", type="integer", description="库存内码id")
 * @SWG\Property(name="fmaterial_id", type="integer", description="物料内码id")
 * @SWG\Property(name="fqty", type="number", description="订单数量")
 * @SWG\Property(name="fsale_unit", type="string", description="销售单位")
 * @SWG\Property(name="fbase_unit", type="string", description="基本单位")
 * @SWG\Property(name="fbase_qty", type="number", description="销售基本单位数量（瓶）(订单数量*商品表FRotio)")
 * @SWG\Property(name="fsend_base_qty", type="number", description="发货基本单位数量")
 * @SWG\Property(name="fsend_qty", type="number", description="发货数量")
 * @SWG\Property(name="fcreate_date", type="string", description="创建时间")
 * @SWG\Property(name="fcreator_id", type="integer", description="创建人")
 * @SWG\Property(name="fdocument_status", type="string", description="审核状态")
 * @SWG\Property(name="fmodify_date", type="string", description="修改时间")
 * @SWG\Property(name="fmodify_id", type="integer", description="修改人")
 */
class SaleOrderItem extends BaseModel
{
	//
	protected $table = 'st_sale_order_items';
	protected $guarded = ['id'];
	protected $appends = ['box_qty', 'bottle_qty'];

	public function order(){
        return $this->hasOne(SaleOrder::class,'id','fsale_order_id');
    }

    public function material(){
        return $this->hasOne(Material::class,'id','fmaterial_id');
    }

    public function getBoxQtyAttribute(){
	    return round($this->fqty);
    }

	public function getBottleQtyAttribute(){
		if($this->material){
			return $this->fbase_qty - round($this->fqty) * $this->material->fratio;
		}
		return $this->fbase_qty ;
	}

	/**
	 *
	 */
	protected static function boot()
	{

		parent::boot(); // TODO: Change the autogenerated stub
		static::creating(function ($model)
		{
			if ($model->fmaterial_id) {
				$material = Material::find($model->fmaterial_id);
				$model->fsale_unit = $material->fsale_unit;
				$model->fbase_unit = $material->fbase_unit;
				$model->fqty = $model->box_qty + round($model->bottle_qty / $material->fratio, 2);
				$model->fbase_qty = $model->box_qty * $material->fratio + $model->bottle_qty;
			}
		});

		static::updating(function ($model)
		{
			if ($model->fmaterial_id) {
				$material = Material::find($model->fmaterial_id);
				$model->fsale_unit = $material->fsale_unit;
				$model->fbase_unit = $material->fbase_unit;
				$model->fqty = $model->box_qty + round($model->bottle_qty / $material->fratio, 2);
				$model->fbase_qty = $model->box_qty * $material->fratio + $model->bottle_qty;
			}
		});
	}



}
