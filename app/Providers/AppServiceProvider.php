<?php

namespace App\Providers;

use App\Repositories\ISysConfigRepo;
use App\Repositories\SysConfigRepo;
use App\Services\DataSync\DataSyncSvr;
use App\Services\DataSync\DefaultFilter;
use App\Services\DataSync\DisplayPolicyStoreFilter;
use App\Services\DataSync\KingdeeWorker;
use App\Services\Sms\AliDaYuSms;
use App\Services\Sms\ISmsSvr;
use Illuminate\Support\Facades\Request;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
	//protected $defer = true;
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        //
	    $request = Request::instance();
	    $path = $request->path();
	    //LogSvr::routeSvr()->info($path);
	    if(preg_match('/^api/', $path)) {
	    }
	    if(preg_match('/^\//', $path)) {
	    }
	    if(preg_match('/^admin/', $path)) {
		    config([
			    'auth.model' => User::class,
		    ]);
	    }
	    if(preg_match('/^customer/', $path)) {
		    config([
			    'auth.defaults.guard' => 'customer',
			    'auth.model' => Customer::class,
		    ]);
	    }
    }

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        //
	    $this->app->singleton('dataSync', function($app){
	    	$svr = new DataSyncSvr();
	    	$svr->registerFilter(DefaultFilter::class);
	    	$svr->registerFilter(DisplayPolicyStoreFilter::class, 'exp_display_policy_store');
	    	$svr->registerWorker(KingdeeWorker::class);
	    	return $svr;
	    });
	    $this->app->singleton(ISysConfigRepo::class, SysConfigRepo::class);
	    $this->app->singleton(ISmsSvr::class, AliDaYuSms::class);
    }

    public function provides()
    {
	    return [
	    	'dataSync',
		    ISysConfigRepo::class,
		    ISmsSvr::class,
	    ]; // TODO: Change the autogenerated stub
    }
}
